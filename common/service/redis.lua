---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xudong12.
--- DateTime: 2020/2/26 11:39 AM
---

module(..., package.seeall)

local redis_t = require('lib.redis')
local redis_c = require('config.redis')
local cjson = require('cjson')



-- mids == table
-- t_type 业务类型
--return table
function get(mids, t_type)

    local conf = get_conf(t_type)
    local conn = redis_t.conn(conf.host, conf.port)
    local m1, m2, m3, m4, m5, m6 = unpack(mids)
    local res = conn:mget(m1, m2, m3, m4, m5, m6)

    local data = {}
    if res and type(res) == 'table' then
        redis_t.close(conn)
        for i, v in pairs(res) do
            if v ~= nil then
                --conn:close()
                local status, t_v
                status, t_v = pcall(cjson.decode, v)
                if status then
                    data[i] = t_v
                else

                    data[i] = false
                end
            end
        end
    end

    return data
end


-----------------------------------------------------------------------------
-- 根据单个key从redis获取value
-- Input
-- @param key redis中的key
-- @param poolType redis库类型，如:cache_a,cache_b
-- Returns
-- @return 返回的value
-----------------------------------------------------------------------------
function getByKey(key, poolType)
    local conf = get_conf(poolType)
    local conn = redis_t.conn(conf.host, conf.port)
    local res = conn:get(key)
    if not res then
        return res
    end
    redis_t.close(conn)
    return res

end

function set (key, value, t_type)
    local conf = get_conf(t_type)
    local conn = redis_t.conn(conf.host, conf.port)
    local status = conn:set(key, value)
    if not status then
        return status
    end
    conn:expire(key, 86400)
    redis_t.close(conn)
    return status
end

function del(key,t_type)
    local conf = get_conf(t_type)
    local conn = redis_t.conn(conf.host, conf.port)
    local status = conn:del(key)
    if not status then
        return status
    end
    redis_t.close(conn)
    return status
end
-----------------------------------------------------------------------------
-- 向t_type中的所有reids写数据
-- Input
-- @param key string
-- @param value string
-- Returns
-- @return Boole
-----------------------------------------------------------------------------
function setAll(key, value, t_type)
    local idc = get_idc()
    local confs = redis_c[idc]
    local confs = confs[t_type]
    local status
    for _, conf in pairs(confs) do
        local conn = redis_t.conn(conf.host, conf.port)
        status = conn:set(key, value)
        if status then
            conn:expire(key, 86400)
            redis_t.close(conn)
        end

    end
    return status
end

-----------------------------------------------------------------------------
-- 永久设置， 不设置过期时间
-----------------------------------------------------------------------------
function setEver (key, value, t_type)
    local conf = get_conf(t_type)
    local conn = redis_t.conn(conf.host, conf.port)
    local status = conn:set(key, value)
    if not status then
        return status
    end
    redis_t.close(conn)
    return status
end

-----------------------------------------------------------------------------
-- 向t_type中的所有reids写数据 不设置过期时间
-----------------------------------------------------------------------------
function setAllEver(key, value, t_type)
    local idc = get_idc()
    local confs = redis_c[idc]
    local confs = confs[t_type]
    local status
    for _, conf in pairs(confs) do
        local conn = redis_t.conn(conf.host, conf.port)
        status = conn:set(key, value)
        if status then
            redis_t.close(conn)
        end

    end
    return status
end

function get_conf(t_type)
    local idc = get_idc()
    local conf = redis_c[idc]
    local conf = conf[t_type]

    --math.randomseed(os.time())

    local reTime = tostring(ngx.now()):reverse()
    local seed = reTime:sub(1, 3) .. reTime:sub(5, 7)
    math.randomseed(seed)

    conf = conf[math.random(#conf)]
    return conf

end

function getByKeyNew(key, poolType)
    local conf = get_conf(poolType)
    local conn = redis_t.conn(conf.host, conf.port)
    local resdata, err = conn:get(key)
    redis_t.close(conn)
    return resdata, err

end

--通过FlowManager获取
function get_idc()
    local t_idc = require('lib.idc')
    local idc = t_idc:new()
    idc = idc:get_idc()
    return idc
end